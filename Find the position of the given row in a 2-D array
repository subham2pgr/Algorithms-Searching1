Find the position of the given row in a 2-D array
Given a matrix mat[][] of size m * n which is sorted in row-wise fashion and an array row[], the task is to check if any row in the matrix is equal to the given array row[].

Examples:

Input: mat[][] = {
{1, 1, 2, 3, 1},
{2, 1, 3, 3, 2},
{2, 4, 5, 8, 3},
{4, 5, 5, 8, 3},
{8, 7, 10, 13, 6}}

row[] = {4, 5, 5, 8, 3}
Output: 4
4th row is equal to the given array.

Input: mat[][] = {
{0, 0, 1, 0},
{10, 9, 22, 23},
{40, 40, 40, 40},
{43, 44, 55, 68},
{81, 73, 100, 132},
{100, 75, 125, 133}}

row[] = {10, 9, 22, 23}
Output: 2

Recommended: Please try your approach on {IDE} first, before moving on to the solution.
Naive approach: Similar to a linear search on a 1-D array, perform the linear search on the matrix and compare every row of the matrix with the given array. If some row matches with the array, print its row number else print -1.

Below is the implementation of the above approach:
filter_none
edit
play_arrow

brightness_4
// C++ implementation of the approach 
#include <bits/stdc++.h> 
using namespace std; 
const int m = 6, n = 4; 
  
// Function to find a row in the 
// given matrix using linear search 
int linearCheck(int ar[][n], int arr[]) 
{ 
    for (int i = 0; i < m; i++) { 
  
        // Assume that the current row matched 
        // with the given array 
        bool matched = true; 
  
        for (int j = 0; j < n; j++) { 
  
            // If any element of the current row doesn't 
            // match with the corresponding element 
            // of the given array 
            if (ar[i][j] != arr[j]) { 
  
                // Set matched to false and break; 
                matched = false; 
                break; 
            } 
        } 
  
        // If matched then return the row number 
        if (matched) 
            return i + 1; 
    } 
  
    // No row matched with the given array 
    return -1; 
} 
  
// Driver code 
int main() 
{ 
    int mat[m][n] = { { 0, 0, 1, 0 }, 
                      { 10, 9, 22, 23 }, 
                      { 40, 40, 40, 40 }, 
                      { 43, 44, 55, 68 }, 
                      { 81, 73, 100, 132 }, 
                      { 100, 75, 125, 133 } }; 
    int row[n] = { 10, 9, 22, 23 }; 
  
    cout << linearCheck(mat, row); 
  
    return 0; 
} 
Output:
2
Time Complexity: O(m * n)
